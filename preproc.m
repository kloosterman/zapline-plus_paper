function preproc(cfg)% function MEG2afc_preproc(cfg1, cfg2, cfg3, outputfile)% MEG2afc preproc inc eyeif ismac  edf2asc = '/Users/kloosterman/Dropbox/tardis_code/MATLAB/tools/custom_tools/eyelink/mac/edf2asc';else  edf2asc = '/home/mpib/kloosterman/MATLAB/tools/custom_tools/eyelink/linux/edf2asc';endPREIN = cfg.PREIN;PREOUT = cfg.PREOUT;linenoise_rem = cfg.linenoise_rem;infile = cfg.infile;disp('Selected files to process:')disp(infile)cd(fileparts(infile));%%disp('load raw meg data, hpfilter')cfg=[]; % HP filter% cfg.hpfilter = 'yes';% cfg.hpfreq =  0.5;  %% cfg.hpfiltord = 4;cfg.dataset = infile;if contains(infile, 'fif')  cfg.channel = {'MEG*2', 'MEG*3'}; %  58 59 keep %cfg1.channel;else  cfg.channel = 'MEG'; %  58 59 keep %cfg1.channel;endcfg.continuous = 'yes';% cfg.bsfilter = 'yes'; % try out% cfg.bsfreq = [49 51];data = ft_preprocessing(cfg);% linenoise_rem = 'bandstop';switch linenoise_rem  case 'zapline-plus'    disp 'Run zapline-plus'    cfg=[];    cfg.resample = 'yes';    cfg.resamplefs = 350;    cfg.detrend = 'no';    data = ft_resampledata(cfg, data);    dat = data.trial{1};        [cleanData, zaplineConfig, analyticsResults, plothandles] = clean_data_with_zapline_plus(dat, data.fsample, 'noisefreqs', 50, 'nkeep', 90); %    [~,filename]=fileparts(infile);    saveas(gcf, fullfile(PREOUT, 'figures', [filename '_50Hz.png']))    save(fullfile(PREOUT, [filename '_50Hz.mat']),  'analyticsResults', 'zaplineConfig')    %     [cleanData2, zaplineConfig, analyticsResults, plothandles] = clean_data_with_zapline_plus(dat, data.fsample); %%     [~,filename]=fileparts(infile);%     saveas(gcf, fullfile(PREOUT, 'figures', [filename '_XXHz.png']))%     save(fullfile(PREOUT, [filename '_XXHz.mat']),  'analyticsResults', 'zaplineConfig')        %     [cleanData, resNremoveFinal, resScores, config, plothandles] = clean_data_with_zapline(dat, data.fsample, 'chunklength', 150, 'noisefreqs', 50/3); %%     saveas(gcf, fullfile(PREOUT, 'figures',  sprintf('%s_%s_run%d_zapline-plus_50/3Hz.png', SUBJ, cond, irun)) )    %     [cleanData, resNremoveFinal, resScores, cfg, plothandles] = clean_data_with_zapline(dat, data.fsample, 50, 'sigmaIncrease', 0, 'nkeep', 271, 'initialSigma', 2.5);      case 'zapline'    % cfg = []; % gives issues with last segment    % cfg.length = 10;    % cfg.overlap = 0;    % data = ft_redefinetrial(cfg, data);     nsmp = length(data.time{1});    trl = [];    trl = [1:12000:nsmp; 12000:12000:nsmp+11999]'; % 10 sec segments    trl = trl(1:end-1,:); % remove last segment ...    trl(end,2) = nsmp; % ... and add it to the previous one    trl(:,3) = 0;    cfg = [];    cfg.trl = trl;    data = ft_redefinetrial(cfg, data);        disp 'Zapline noisetools'    cfg = [];    cfg.fline = 50/1200;    cfg.nremove = 10;    cfg.p_nkeep = 100;    % p.nfft = 256;    cfg.plotflag = 1;    data = ft_nt_zapline(cfg, data);  case 'DFT'    nsmp = length(data.time{1});    trl = [];    trl = [1:12000:nsmp; 12000:12000:nsmp+11999]'; % 10 sec segments    trl = trl(1:end-1,:); % remove last segment ...    trl(end,2) = nsmp; % ... and add it to the previous one    trl(:,3) = 0;    cfg = [];    cfg.trl = trl;    data = ft_redefinetrial(cfg, data);        disp 'DFT filter 50 Hz on segments'    cfg=[];    cfg.dftfilter     = 'yes';    cfg.dftfreq = [49.5:0.1:50.5, 99.5:0.1:100.5,  149.5:0.1:150.5] %[50 100 150]; %[49:0.1:51, 99:0.1:101,  149:0.1:151, 199:0.1:201];  % [50 100 150]; line noise removal using discrete fourier transform    cfg.padding = 0;    data = ft_preprocessing(cfg, data);  case 'bandstop'    disp 'bandstop filter 50 Hz'    cfg=[];    cfg.bsfilter = 'yes'; % try out    cfg.bsfilttype    = 'firws'; % per MNE notch filter    cfg.bsfiltdf = 0.25;    bsfreq = transpose(50:50:250); % per MNE notch filter    width = bsfreq/200;        cfg.bsfreq = [bsfreq-width/2 bsfreq+width/2];%     cfg.bpinstabilityfix = 'yes';    data = ft_preprocessing(cfg, data);endusecleanline = 0;if usecleanline  disp 'tryout cleanline, TODO make work for chunks? Best use zapline with either chunking OR cleanline'  addpath(genpath('/Users/kloosterman/Dropbox/tardis_code/MATLAB/tools/EEG-Clean-Tools/PrepPipeline'))  signal=[];  signal.data = data.trial{1};  signal.srate = data.fsample;  lineNoiseIn = struct('Fs', 1200, 'lineNoiseChannels', 1:length(data.label)-3, 'lineFrequencies', 50:50:550, 'taperBandWidth', 2, 'taperWindowSize', 4, ...    'taperWindowStep', 1, 'fScanBandWidth', 2, 'tau', 100, 'pad', 0, 'fPassBand', [0 600], 'maximumIterations', 10 ); % ,  tic;[signalclean, lineNoiseOut] = cleanLineNoise(signal, lineNoiseIn); toc  dataclean = data;  dataclean.trial = {signalclean.data};end   